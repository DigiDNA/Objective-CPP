/*******************************************************************************
 * Copyright (c) 2015, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @file        Vector.mm
 * @copyright   (c) 2015 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 */

#import <ObjectiveCPP.hpp>

namespace ObjectiveCPP
{
    NSArray * ArrayFromList( const std::list< std::string > & vector )
    {
        return ArrayFromList< std::string, NSString >( vector, @selector( initWithCPPString: ) );
    }
    
    NSArray * ArrayFromList( const std::list< bool > & vector )
    {
        return ArrayFromList< bool, NSNumber >( vector, @selector( initWithBool: ) );
    }
    
    NSArray * ArrayFromList( const std::list< signed char > & vector )
    {
        return ArrayFromList< signed char, NSNumber >( vector, @selector( initWithChar: ) );
    }
    
    NSArray * ArrayFromList( const std::list< unsigned char > & vector )
    {
        return ArrayFromList< unsigned char, NSNumber >( vector, @selector( initWithUnsignedChar: ) );
    }
    
    NSArray * ArrayFromList( const std::list< signed short > & vector )
    {
        return ArrayFromList< signed short, NSNumber >( vector, @selector( initWithShort: ) );
    }
    
    NSArray * ArrayFromList( const std::list< unsigned short > & vector )
    {
        return ArrayFromList< unsigned short, NSNumber >( vector, @selector( initWithUnsignedShort: ) );
    }
    
    NSArray * ArrayFromList( const std::list< signed int > & vector )
    {
        return ArrayFromList< signed int, NSNumber >( vector, @selector( initWithInt: ) );
    }
    
    NSArray * ArrayFromList( const std::list< unsigned int > & vector )
    {
        return ArrayFromList< unsigned int, NSNumber >( vector, @selector( initWithUnsignedInt: ) );
    }
    
    NSArray * ArrayFromList( const std::list< signed long > & vector )
    {
        return ArrayFromList< signed long, NSNumber >( vector, @selector( initWithLong: ) );
    }
    
    NSArray * ArrayFromList( const std::list< unsigned long > & vector )
    {
        return ArrayFromList< unsigned long, NSNumber >( vector, @selector( initWithUnsignedLong: ) );
    }
    
    NSArray * ArrayFromList( const std::list< signed long long > & vector )
    {
        return ArrayFromList< signed long long, NSNumber >( vector, @selector( initWithLong: ) );
    }
    
    NSArray * ArrayFromList( const std::list< unsigned long long > & vector )
    {
        return ArrayFromList< unsigned long long, NSNumber >( vector, @selector( initWithUnsignedLongLong: ) );
    }
    
    NSArray * ArrayFromList( const std::list< float > & vector )
    {
        return ArrayFromList< float, NSNumber >( vector, @selector( initWithFloat: ) );
    }
    
    NSArray * ArrayFromList( const std::list< double > & vector )
    {
        return ArrayFromList< double, NSNumber >( vector, @selector( initWithDouble: ) );
    }
}
